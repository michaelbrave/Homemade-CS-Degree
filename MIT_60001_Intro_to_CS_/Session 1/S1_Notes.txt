From the Book: Guttag, John. Introduction to Computation and Programming Using Python: With Application to Understanding Data Second Edition  

Readings: Chapters 1 and 2.1  

Supplemented by lecture found at:
https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/lecture-videos/lecture-1-what-is-computation  

a computer only performs calculations and remembers the results of those calculations, that's it.  

Declarative knowledge is facts and statements of facts.
Imperative knowledge is “how to” knowledge, or recipes.  

algorithm: a method or a sequence of steps, with a flow of control that specifies when each step is to be executed. Like a recipe.  

algorithm more scientifically: a finite list of instructions that describe a computation that when executed on a set of inputs will proceed through a set of well-defined states and eventually produce an output.  

computation: the action of mathematical calculation  

fixed-program computers: designed to do very specific things, often only one thing. Like a simple calculator.  

stored-program computer: stores (and manipulates) a sequence of instructions, and has components that will execute any instruction in that sequence. Useful because then we can easily change what the program does.  

interpreter: a computer program that directly executes instructions  

flow of control: the order in which individual statements, instructions or function calls of an imperative program are executed or evaluated  

programming language: a formal language, which comprises a set of instructions that produce various kinds of output  

Universal Turing Machine: can simulate an arbitrary Turing machine on arbitrary input  

Church-Turing thesis: if a function is computable, a Turing Machine can be programmed to compute it  

halting problem: the problem of determining, from a description of an arbitrary computer program and an input, whether the program will finish running, or continue to run forever  

Turing completeness: if it can be used to emulate a Turing machine then it is turing complete.  

note:
"anything that can be programmed in one programming language can be programmed in any other programming language"  

"the fundamental idea of programming as the process of assembling a sequence of operations remains central"  

"the best thing and the worst thing about programming are the same: the computer will do exactly what you tell it to do"  

"Different languages are better or worse for different kinds of applications"  

"Each programming language has a set of primitive constructs, a syntax, a static semantics, and a semantics"  
"By analogy with a natural language, e.g., English, the primitive constructs are words, the syntax describes which strings of words constitute well-formed sentences, the static semantics defines which sentences are meaningful, and the semantics defines the meaning of those sentences"  

literals: e.g., the number 3.2 and the string 'abc'  

infix operators: e.g., + and /  

syntax: defines which strings of characters and symbols are well formed  

static semantics: grammatically correct but without meaning. 3.2/abc doesn't really make sense even if correctly formed.  

semantics: associates a meaning with each syntactically correct string of symbols that has no static semantic errors  

note:
"When a program appears to be doing the right thing but isn’t, bad things can follow: fortunes can be lost, patients can receive fatal doses of radiation therapy, airplanes can crash"  

"Whenever possible, programs should be written in such a way that when they don’t work properly, it is self-evident"  

Low-level versus high-level: move bits or make menu's, depends on the level of abstraction.  

General versus targeted to an application domain: is the design of the language highly specialized or widely applicable.  

Interpreted versus compiled: is the code executed directly by an interpreted or converted by a compiler?  

source code: a text listing of commands to be compiled or assembled into an executable computer program  

machine code: a computer programming language consisting of binary or hexadecimal instructions which a computer can respond to directly  

Python's Weaknesses: weak static semantic checking make it not optimal for programs that have high reliability constraints and code that is built and maintained by many people over a long period of time.  

program/script: is a sequence of definitions and commands

shell: a user interface for access to an operating system's services. In general, operating system shells use either a command-line interface (CLI) or graphical user interface (GUI), depending on a computer's role and particular operation  

command/statement: instructs the interpreter to do something

Objects: an object is an instance of a Class. Objects are an abstraction. They hold both data, and ways to manipulate the data  

type: an attribute of data which tells the compiler or interpreter how the programmer intends to use the data  

Scalar objects: are indivisible  
    int 
    float 
    bool 
    none 

Non-scalar objects: for example strings, have internal structure  

literals: a notation for representing a fixed value in source code  

floating point numbers: a variable type that is used to store floating-point number values. A floating-point number is one where the position of the decimal point can "float" rather than being in a fixed position within a number  

operators: constructs which behave generally like functions, but which differ syntactically or semantically from usual functions. Common simple examples include arithmetic, comparison, and logical operations  

expressions: a combination of one or more constants, variables, operators, and functions that the programming language interprets and computes to produce another value  

note:
"Objects and operators can be combined to form expressions, each of which evaluates to an object of some type"  

== operator is used to test whether two expressions evaluate to the same value  

!= operator is used to test whether two expressions evaluate to dif- ferent values  

>>> is a shell prompt indicating that the interpreter is expecting the user to type some code into the shell  

type(variable): can be used to find out the type of an object  

i//j integer division  

i**j i raised to the power j  

Variables: associate names with objects. In Python, a variable is just a name, nothing more  

binds: when we reassign values to variables it shifts the memory pointer to the new value and loses the former value that stays stored in now unlinked memory.  

assignment: sets and/or re-sets the value stored in the storage location denoted by a variable name  

note:
"This does not mean that only computers read programs"  

reserved words/keywords: The reserved words in Python 3 are: and, as, assert, break, class, continue, def, del, elif, else, except, False, finally, for, from, global, if, import, in, is, lambda, nonlocal, None, not, or, pass, raise, return, True, try, while, with, and yield.  

comments: python uses # for comments  

integrated development environment (IDE): a software application that provides comprehensive facilities to computer programmers for software development  








