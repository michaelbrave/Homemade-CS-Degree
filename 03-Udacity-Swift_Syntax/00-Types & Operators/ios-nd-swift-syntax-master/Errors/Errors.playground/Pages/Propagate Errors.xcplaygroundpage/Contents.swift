//: [Previous](@previous)
//: ### Propagate Errors
//: When errors are thrown by a function, they must be handled immediately or passed (propagated) to the code that called the function. In the example below, the `readFileIntoString` function calls the error-prone string initializer. If any error occurs, it is handled immediately.
//:
import Foundation

func readFileIntoString(fileName: String, fileExtension: String) {
    if let fileURL = Bundle.main.url(forResource: fileName, withExtension: fileExtension) {
        do {
            let content = try String(contentsOf: fileURL, encoding: .utf8)
            print(content)
        } catch {
            print("error handled immediately!")
        }
    }
}

readFileIntoString(fileName: "swift", fileExtension: "png")
//: To propagate all possible errors to the calling site, start by removing the `do`-`catch` statement and adding `throws` to the signature of the function which calls the error-prone code.
//:
func readFileIntoStringWithThrows(fileName: String, fileExtension: String) throws {
    if let fileURL = Bundle.main.url(forResource: fileName, withExtension: fileExtension) {
        let content = try String(contentsOf: fileURL, encoding: .utf8)
        print(content)
    }
}
//: Now, any code that calls `readFileIntoStringWithThrows` is responsible for handling any errors it generates.
//:
do {
    try readFileIntoStringWithThrows(fileName: "swift", fileExtension: "png")
} catch {
    print("the error was propagated to me, and I handled it!")
}
//: - Callout(Watch Out!):
//: If an error can be generated by a function, but it is never handled, then Xcode will complain.
//:
func callErrorProneCode() {
    // uncomment this function call to see Xcode complain about an unhandled error
    //try readFileIntoStringWithThrows(fileName: "swift", fileExtension: "png")
}
//: Sometimes it is appropriate to handle some errors immediately while propagating others for further processing. To propagate a specific error, use the `throw` keyword.
//:
func readFileIntoStringHandleAndThrow(fileName: String, fileExtension: String) throws {
    if let fileURL = Bundle.main.url(forResource: fileName, withExtension: fileExtension) {
        do {
            let content = try String(contentsOf: fileURL, encoding: .utf8)
            print(content)
        } catch CocoaError.fileReadUnknown {
            print("file unknown, cannot read")
        } catch let error {
            throw error /* throw (propagate) this error to the call site */
        }
    }
}

do {
    try readFileIntoStringHandleAndThrow(fileName: "swift", fileExtension: "png")
} catch let error {
    print("handling error: \(error.localizedDescription)")
}
//: - Callout(Watch Out!):
//: In a playground, if an error is generated and not handled in the global scope, then the playground's execution will stop.
//:
// uncomment this line and the playground will stop executing because the error is not handled
//try readFileIntoStringHandleAndThrow(fileName: "swift", fileExtension: "png")

// if the error is not handled, then this print statement is never reached
print("print me!")
//: [Next](@next)
